### Update ideas ###

* Stripe branch [DONE]
* Update success/failure urls [DONE]
* Make credit/call system work [DONE]
* Create new Mongo DB clusters and schemas (for headlines data and customer data) [DONE]
* Store all necessary variables in .env [DONE]
* Add webhook security layer [DONE]
* Create python library that can communicate with the service [DONE]

* Add more functionality for the user  [DONE]
* Enable callbacks [DONE]
* Package the lib into pip [DONE]
* Perform different local tests [DONE]

* Buy and figure out how to attach DNS [DONE]
* run application oni a live AWS instance [Done]
* Update DNS in pypi package [DONE]
* Test calling it [DONE]
* Update env vars with production keys for all services [DONE]
* Create pricing/packaging plan [DONE]
* Perform live testing with friends (Drop price) (0.5$ - 100 calls) [DONE]
* Figure out live bug [DONE]
* Check aws bill [DONE]
* Finalize live testing with friends [DONE]
* Discuss project with Martin [DONE]
* Buy domain name, issue elastic IP, and link to new domain [DONE]
* Configure instance to work with elastic IP + new domain name [DONE]
* Test server/client with new domain

* Prepare documentation/blog for developers (CURL commands for language neutral instruction)
* Make a blog or a simple demo site
* Prepare a video to share on Linkedin
* Make updates on Linkedin
* Share with public as a Alpha v1 release

Optimization
* Separate payment service from AI service (micro-services architecture)
    - Create signup-auth service that utilizes JWT
    - Create a payment/checkout service (authorization happens using JWT obtained in signup/auth service)
    - Create a DB service
    - Create an AI service 
        @ Use Redis for caching client requests
        @ Use celery to queue tasks
* Dockerize all applications
* Docker-compose for installation and serving 
* Using NGNIX for reverse proxy to route user requests
* Think about minimizing communication between DB and APP + the usage of caching for speedup
